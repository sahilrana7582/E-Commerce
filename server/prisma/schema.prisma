// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}




enum Role {
  USER
  ADMIN
}

model User{
  id        String   @id @default(uuid())
  firstName String?
  lastName  String?
  email     String   @unique
  password  String
  imageUrl  String?  @db.Text
  role      Role?    @default(USER)



  listedProducts ProductDetail[]
  addresses     Address[]
  orders        Order[]




  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum Gender {
  Male
  Female
}

enum SubCategory  {
  TopWear
  BottomWear
}

enum Size {
  S
  M
  L
  XL
  XXL
}
model ProductDetail {
  id           String       @id @default(uuid())
  name         String
  description  String       @db.Text
  category     Gender      
  subCategory  SubCategory       
  price        Decimal
  sizes        Size[]
  sellerInfo   User         @relation(fields: [seller], references: [id], onDelete: Cascade)
  seller       String    
  bestSeller   Boolean      @default(false)
  mainImg      String       @db.Text
  imgs         String[]  


  Order        Order[]



  
  createdAt    DateTime     @default(now()) 
  updatedAt    DateTime     @updatedAt      
}


enum Status { 
  ORDERED
  PROCESSING
  CONFIRMED
  PACKED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

model Address {
  id           String       @id @default(uuid())
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  streetName   String
  city         String
  state        String
  country      String
  pincode      String
  phoneNumber  String

  
  orders       Order[]

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}



model Order{
  id           String       @id @default(uuid())
  productId    String
  product      ProductDetail @relation(fields: [productId], references: [id], onDelete: Cascade)
  buyerInfo    User         @relation(fields: [buyer], references: [id], onDelete: Cascade)
  buyer        String
  quantity     Int
  totalAmount  Decimal
  status       Status       @default(ORDERED)


  shippingAddress String
  shippingInfo  Address     @relation(fields: [shippingAddress], references: [id], onDelete: Cascade)





  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

